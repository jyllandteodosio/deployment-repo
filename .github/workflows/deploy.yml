name: Deploy Docker Compose Stack

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: "production"

    steps:
      # Checkout the code from the deployment repository
      - name: Checkout deployment repository code
        uses: actions/checkout@v4

      # Checkout the code from the taskaru-frontend repository
      - name: Checkout Frontend Repo
        uses: actions/checkout@v4
        with:
          repository: jyllandteodosio/task-manager-react
          ref: main
          path: ./frontend

      - name: Debug Secrets
        run: |
          echo "DOCKERHUB_USERNAME: ***$(echo -n "${{ secrets.DOCKER_HUB_USERNAME }}" | tail -c 4)***" # Last 4 chars
          echo "DOCKERHUB_ACCESS_TOKEN: ***$(echo -n "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | tail -c 4)***" # Last 4 chars

      # Log in to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # --- Build the taskaru-frontend Docker image ---
      - name: Build taskaru-frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend 
          file: ./frontend/Dockerfile.production 
          push: true 
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/taskaru-frontend:${{ github.sha }}
          build-args: |
            API_URL=${{ vars.NEXT_PUBLIC_API_URL }}

      # --- Ensure Target Directory Permissions on Droplet ---
      # This step ensures the SSH user (root) has correct permissions
      # before attempting to copy files.
      - name: Set permissions on Droplet target directory
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }} 
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            DEPLOY_BASE_DIR="/opt/docker"
            # Ensure the directory exists and is owned by the SSH user (root)
            sudo mkdir -p ${DEPLOY_BASE_DIR}
            sudo chown -R ${{ secrets.SSH_USER }}:${{ secrets.SSH_USER }} ${DEPLOY_BASE_DIR}
            # Ensure the owner has write permissions
            sudo chmod -R u+w ${DEPLOY_BASE_DIR}
            echo "Set ownership and write permissions for ${{ secrets.SSH_USER }} on ${DEPLOY_BASE_DIR}"


      # --- File Transfer to Droplet ---
      - name: Copy files to Droplet
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "Dockerfile,docker-compose.yml,nginx/,scripts/"
          target: "/opt/docker/"
          overwrite: true


      # --- Execute Deployment Commands on Droplet ---
      - name: Run Docker Compose Deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # Removed envs parameter
          # envs: |
          #   ...

          script: |
            DEPLOY_BASE_DIR="/opt/docker"
            ENV_FILE="${DEPLOY_BASE_DIR}/.env.generated"
            DEPLOY_SCRIPT_PATH="${DEPLOY_BASE_DIR}/scripts/deploy.sh"

            # --- Create the temporary .env file directly here ---
            # Use echo and redirection to write variables from GitHub Actions environment
            # directly into the file on the droplet.
            echo "Creating temporary environment file: ${ENV_FILE}"
            cat <<EOF > "${ENV_FILE}"
            SESSION_SECRET=${{ secrets.SESSION_SECRET }}
            RECAPTCHA_SECRET_KEY=${{ secrets.RECAPTCHA_SECRET_KEY }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            MONGO_INITDB_DATABASE=${{ secrets.MONGO_INITDB_DATABASE }}
            MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
            MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
            NODE_ENV=${{ vars.NODE_ENV }}
            PORT=${{ vars.PORT }}
            MONGO_URI=${{ vars.MONGO_URI }}
            DB_URI=${{ vars.DB_URI }}
            CERT_FOLDER=${{ vars.CERT_FOLDER }}
            CORS_ORIGIN=${{ vars.CORS_ORIGIN }}
            CLIENT_URL=${{ vars.CLIENT_URL }}
            GOOGLE_CLIENT_ID=${{ vars.GOOGLE_CLIENT_ID }}
            NEXT_PUBLIC_RECAPTCHA_SITE_KEY=${{ vars.NEXT_PUBLIC_RECAPTCHA_SITE_KEY }}
            NEXT_PUBLIC_API_URL=${{ vars.NEXT_PUBLIC_API_URL }}
            FRONTEND_TAG=${{ github.sha }}
            # Add any other variables your services require here
            EOF

            # Check if the env file was created and has content (optional but good for debugging)
            if [ ! -s "${ENV_FILE}" ]; then
              echo "Error: Temporary environment file is empty or not created!"
              # You could add more debugging here if needed
              exit 1
            fi
            echo "Temporary environment file created successfully."

            # --- Debugging Step: Print the content of the generated .env file ---
            echo "--- Content of ${ENV_FILE} ---"
            cat "${ENV_FILE}"
            echo "-----------------------------------"

            # Make the deploy script executable
            chmod +x ${DEPLOY_SCRIPT_PATH}

            # Navigate to the directory containing docker-compose.yml
            cd ${DEPLOY_BASE_DIR} || { echo "Error: Deployment directory ${DEPLOY_BASE_DIR} not found."; exit 1; }

            echo "Navigated to deployment directory: ${PWD}"

            # Execute the deploy script (which now expects the env file to exist)
            ${DEPLOY_SCRIPT_PATH}
